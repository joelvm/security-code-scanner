package service

import (
	"fmt"
	"net/http"
	"scs/dao"
	"scs/model"
	"scs/processor"

	"github.com/gin-gonic/gin"
)

// Return all vulnerabilty types or treat error if exists
func GetVulnerabilityTypes(c *gin.Context) {
	vulnerabilityTypes, err := dao.GetVulnerabilityTypes()
	if err != nil {
		c.IndentedJSON(http.StatusInternalServerError, gin.H{"message": fmt.Sprintf("error reading from db %v", err)})
		return
	}
	c.IndentedJSON(http.StatusOK, vulnerabilityTypes)
}

func GetVulnerabilityTypeByID(c *gin.Context) {
	id := c.Param("id")
	vulnerabilityType, err := dao.GetVulnerabilityTypeById(id)

	if err != nil {
		c.IndentedJSON(http.StatusInternalServerError, gin.H{"message": fmt.Sprintf("error reading from db %v", err)})
		return
	}

	c.IndentedJSON(http.StatusOK, vulnerabilityType)
}

func DeleteVulnerabilityTypeByID(c *gin.Context) {
	id := c.Param("id")

	res, err := dao.DeleteVulnerabilityTypeByID(id)

	if err != nil {
		c.IndentedJSON(http.StatusInternalServerError, gin.H{"message": fmt.Sprintf("error reading from db %v", err)})
		return
	}

	c.IndentedJSON(http.StatusCreated, res)
}

// PostVulnerabilityType adds an vulnerability type from JSON received in the request body.
func PostVulnerabilityType(c *gin.Context) {
	var newType model.VulnerabilityType

	// Call BindJSON to bind the received JSON to
	// newType.
	if err := c.BindJSON(&newType); err != nil {
		c.IndentedJSON(http.StatusInternalServerError, gin.H{"message": fmt.Sprintf("error binding request %v", err)})
	}

	created, err := dao.SaveVulnerabilityType(newType)
	if err != nil {
		c.IndentedJSON(http.StatusInternalServerError, gin.H{"message": fmt.Sprintf("error saving new vulnerability type %v", err)})
	}
	c.IndentedJSON(http.StatusCreated, created)
}

// PostRunScanType executes a scan of the given type for the given path.
func PostRunScanType(c *gin.Context) {

	var params model.RunScanType

	// Call BindJSON to bind the received JSON to params.
	if err := c.BindJSON(&params); err != nil {
		c.IndentedJSON(http.StatusInternalServerError, gin.H{"message": fmt.Sprintf("error reading from db %v", err)})
	}

	vulnerabilityType, err := dao.GetVulnerabilityTypeById(params.Type)
	if err != nil {
		c.IndentedJSON(http.StatusInternalServerError, gin.H{"message": fmt.Sprintf("error reading from db %v", err)})
		return
	}

	scanResults, err := processor.Scan(params.Path, vulnerabilityType)

	if err != nil {
		c.IndentedJSON(http.StatusExpectationFailed, gin.H{"message": fmt.Sprintf("error while processing %v", err)})
		return
	}
	c.IndentedJSON(http.StatusAccepted, scanResults)
}
